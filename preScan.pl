#!/usr/bin/perl -w
#===============================================================================
#
#        Li Xue (), me.lixue@gmail.com
#        12/26/2015 08:55:13 AM
#
#  DESCRIPTION: Scan the pdb file and determine whether each residue belongs to the types defined in patch.top, such as:
#               1. at N-ter or C-ter
#               2. N-ter Pro
#        INPUT: pdb file
#       OUTPUT:
#      chainID atomResnum residueName  typeName
#        A     120       GLY     NTER
#        A     121       ALA     DISU
#
#        USAGE: ./preScan.pl
#
#        NOTES: cis and trans not defined
#===============================================================================

use strict;
use warnings;
use utf8;

my $pdbFL        = shift @ARGV;
my $flag_newResi = 0;             #1: the start of the next residue

my $residues = &read_pdbFL($pdbFL);
#$residues->{"$chainID:$atomResiNum:$resiName"} =( $atom1, $atom2...)
#
print "#generated by $0\n";

foreach my $key ( sort keys %$residues ) {

    #For each residue, determine its type
    my ( $chainID, $atomResNum, $resiName ) = split( /:/, $key );

#    if ($chainID eq 'B' && $atomResNum eq '1' && $resiName eq 'ASP'){
#        print "\n\n";
#        print "hello\n";
#        my $a = join ("\t", @{$residues->{$key}});
#        print $a;
#        print "\n";
#    }
#    else {
#        next;
#    }
    my $type = &get_resiType( $residues->{$key}, $resiName );
    print "$chainID\t$atomResNum\t$resiName\t$type\n";
}

#-------------------------------
sub get_resiType {
    my @atoms    = @{ shift @_ };
    my $resiName = shift @_;
    my %seen;
    @seen{@atoms} = (1) x scalar @atoms;

    my $type;
    if ($resiName =~ /PRO/
        && defined $seen{'HT1'}
        && defined $seen{'HT2'}
        )
    {
        $type = 'PROP';
        return $type;
    }

    if (   $resiName !~ /PRO/
        && defined $seen{'HT1'}
        && defined $seen{'HT2'}
        && defined $seen{'HT3'} )
    {
        $type = 'NTER';
    }

    elsif ( defined $seen{'OXT'} ) {
        $type = 'CTER';
    }

    elsif ( defined $seen{'NT'} && defined $seen{'H1'} && defined $seen{'H2'} )
    {
        $type = 'CTN';
    }

    elsif ( $resiName =~ /CYS/ && defined $seen{'1SG'} && defined $seen{'2SG'} )
    {
        print "WARNING: not sure about the difference between CYNH and DISU\n";
        $type = 'DISU';
    }

    elsif (defined $seen{'CYS'}
        && defined $seen{'1SG'}
        && !defined $seen{'2SG'} )
    {
        #not sure about the difference between CYNH and DISU
        print "WARNING: not sure about the difference between CYNH and DISU\n";
        $type = 'CYNH';
    }

    elsif ($resiName =~ /HIS/
        && defined $seen{'ND1'}
        && defined $seen{'CE1'}
        && defined $seen{'CD2'}
        && defined $seen{'NE2'}
        && defined $seen{'HE2'}
        && !defined $seen{'HD1'} )
    {
        $type = 'HISE';
    }

    elsif ($resiName =~ /HIS/
        && defined $seen{'ND1'}
        && defined $seen{'CE1'}
        && defined $seen{'CD2'}
        && defined $seen{'NE2'}
        && !defined $seen{'HE2'} )
    {
        $type = 'HISE';
    }
    else {
        $type = 'Nan';
    }
    return $type;

}

sub read_pdbFL {
    my $pdbFL = shift @_;
    my $residues;
    my $chainID;
    my $atom;
    my $resiName;
    my $atomResiNum;

    open( INPUT, "<$pdbFL" ) or die("Cannot open $pdbFL:$!");
    while (<INPUT>) {
        s/[\n\r]//mg;
        if (/^(ATOM|HETATM)/) {

      #ATOM   4407  C2* GDP B 220     -11.099  22.797   0.052  1.00 10.00      B
            $atom        = substr( $_, 12, 4 );
            $resiName    = substr( $_, 17, 3 );
            $atomResiNum = substr( $_, 22, 5 );
            $chainID     = substr( $_, 21, 1 );

            if ($chainID =~/^\s+$/){
            #-- this pdb file does not have chain ID, read segid instead
               $chainID = substr($_,72,1);
            }

            $atom=~s/\s+//gm;
            $resiName=~s/\s+//gm;
            $atomResiNum=~s/\s+//mg;
            $chainID=~s/\s+//mg;

            push @{ $residues->{"$chainID:$atomResiNum:$resiName"} }, $atom;
        }

    }
    close INPUT;

    if (!defined $atom){
        die("nothing read from $pdbFL:$!");
    }

    return $residues;
}

